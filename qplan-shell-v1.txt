QPlan V1 Shell
==============
Rino Jose <rjose@linkedin.com>
Jun 10, 2013: Initial spec

Drafting effort [X][]

Overview
--------
The shell functions for QPlan need to be short, maybe even 1 character.
Everything should emphasize quick typing and access. On startup, the app
should load people, plan, and work data and figure out the default skill
supply based on the people info.

We need to organize functionality around selecting things, grouping things,
and printing things. The selecting things and grouping things should plug
directly into an HTTP endpoint for this data. The shell functions should guide
the development of the API.

Saving should be done manually. We should create a backup of the files before
we start.

Scenarios
~~~~~~~~~
Here are the scenarios we need to handle:

- Read data and create backups (done)
- Add a work item (done)
- Triage items (done)
  - Tag 1's, 2's, and 3's (done)
- Specify estimates for work items (done)
- Pull all 1's to the top of the list (done)
- Compute default skill supply (done)
- Find feasibility line (done)
- Report feasibility and net supply for a set of items (done)
- Show running totals for plan (done)
- Group work items by track (done)

- Need info around how much resource is needed for each track
- Save data
- Show help

.Describe some scenarios
- Show current plan with feasible line and cutline
- Show plan by track

- Rank work
- Triage work
- Rough sort by triage
- Set cutline


Development
-----------

.Pass 1: Initialization and printing [X][][]
We'll start by making backups of the files and reading data in. Should every
save backup the files? Should we use git for each step? Going to assume that
the number of work items can be used to get the next work id.

Should we refer to work by ID or by rank? Let's try rank for now.

.Pass 2: Triage item/add work item [X][X][X]
Alright, what I want to do here is triage by product and by engineering. After
that we can specify the triage value when adding. Hmmm. It seems to be getting
messy between the work id and the plan work rank. I think I need to pick one.
Let's always use the plan rank.

Adding work should create a new work item, add it to the plan work table with
the appropriate ID. Where should it be in the list? Top of list, bottom of
list just below cutline, just above cutline, at a specific position? Let's
just add it to the end of the work items for now.

.Pass 3: Add estimates [X][]
Let me try this at the shell and see how it feels. How about something like
this:

	est(1, SA, "4L", SN, "M", SB, "S")

I'll have global abbreviations for the skill types. Estimates need to be
strings. Should take an arbitrary number of estimate pairs.

What we need is a way to print a straight list of work items. When selecting
items from a plan, we should include their rank in the results. Done.

.Pass 4: Rough sort by triage [X][X][]
Let's assume that we have a Product triage and an Eng triage and that at some
point, we need to combine the two into a Triage tag. Once this is in place, we
can rough sort on the Triage tag.

- Select all 1s from Product
- Select all 1s from Engineering
- Select conflicts on 1s

If one group specifies a triage priority, but another group does not, we'll
default to the first group's priority.

Alright, I'm ready to try the rough sort now. We can grab all of the 1s from
triage and rank them at the top. I like how these things are outside of the
QPlan core. They're specific to a particular group.

.Pass 5: Compute default skill supply [X][][]
What we need to do here is sum up all of the skills for people and add them to
the plan. We're already doing something similar for the running totals. I
think the code should be very similar.

.Pass 6: Find feasibility line []
Let's just call the line and return the value for now. We can get fancier with
the reporting later.

.Pass 7: Show running totals
Not sure what we want for this. We could show the demand for the work item and
the net supply together. We want to show the rank of the item, the name, the
estimate for that item (string version), and the net supply.

.Pass 9: Clean up shell functions [][]
I want to organize the shell functions so they're more orderly. The shell.lua
file should require the shell functions. The shell functions should be in the
global scope.

.Pass 10: Add saving and reading using prefix


Thoughts
--------
There are a few patterns that I'd like to emphasize. One is that we should
have functions that focus on selecting things, grouping things, and operating
on arrays of things. We shouldn't combine these too much. For instance, we
should group things that we've previously selected or that we've selected and
then operated on.

For things like the maximum ID so far, we should create a function that gets
and sets it. The actual variable will be in memory for now, but at some point,
it will go into a database/cache.

When saving, we should create new files each time. There should be a way to
combine all fo the files into a single state file that can be read on init. More
on this later.
