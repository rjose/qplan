QPlan v4
========
Rino Jose <@rjose>
v2, Jul 1, 2013: Finished step 8

Drafting effort [][]

Overview
--------
The goal of this version is to have QPlan listen for web requests and serve web
pages. The first step is to organize our lua code into app code and modules. The
next step is to bring over the code that can listen and respond to web
requests. After that, we'll pull the lua web request parsing/routing code into a
web module. Finally, we'll create some pages using angular to serve content.

Implementation
--------------

. link:https://github.com/rjose/products/tree/98c7b/qplan/v4[
      Organize lua and C code]
      [X][X][X][X][X]
. Listen and respond to web requests [X][X][X][][][]
. Create angular pages [X][X][X][][][][][]
. Add staff page [X][X][X][X]
. Add work page [X][X][X][][]
. Add tracks page [X][X][][][][][]
. Refactor into select/filter/format [X][X][X][X][X][X][X]
. Refactor web.lua to select/filter/format [X][X][X][X][X]
. Revise Web UI [X][X][X][X][X]<X><X><X><X>
. Add readline support [][][][][]
. Add cls syntax [][][][][][][][][][]


1 - Organize lua and C code
~~~~~~~~~~~~~~~~~~~~~~~~~~~
We should use qplan-c/proto2 as a model here. We'll copy the lua code from
qplan/v2 and see if we can get it running through our custom shell. Let's start
by getting the custom shell running first. Hmmmm. Forgot to check in the
tcp_io.[ch] changes I made. I guess I'll just have to code it up again. These
were just minor changes (function renaming). Alright, I got it to build. Let's
copy the app code over. Done. Let's check this in.

Alright, let's start cleaning some things up. I don't like the global pl and ppl
variables. We should clean these up when we start in on the qplan language. How
about we start by splitting out the repl and web parts of the qplan.c file out.
We should document these as well. I want to only have one lua state for now and
have a lock around that. Done. Alright, let's split out the QPlanContext into
its own files. We'll leave "err_abort" in qplan.c until we have enough utils to
pull it out. After that, we'll create repl and web C files. Done!

OK, next up is bringing up the lua functions from qplan_web. I want to bring the
tests over for these as well. Let's see what would happen with a web request
now. I think we'll get an error on the handle_request call. We got an
unprotected call and died. Let's see if we can make this a protected call. Hmmm.
Not sure how to do this. I did fix this, though, by calling "lua_setglobal"
after the web module was required to set "web".

What we'll do next is bring the request parser over and see if we can
understand the requests. I want to make sure we bring the tests over first,
though. Alright, the request parser tests are over and running. Let's hook up
this up to the handle_request function. Hmmm. I keep getting a core dump when a
web request executes an invalid instruction. I need to fix this. In any case, I
was able to parse a web request! Let's spend a pomodoro on the core dump. If I
can't get that working, let's move to routing the request.

I think the problem is that we're not calling the function as a global function.
Let's expose this and see what happens. OK, that wasn't it. It looks like when
something went wrong, I kept going. Should've gone to an error condition
instead. Let's check this in, but then revert to the nonglobal version and see
if it still works. Yup. Let's check in and then go on to routing (which is
properly the next prototype).

2 - Listen and respond to web requests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Alright, now that we've gotten requests parsed, let's route them to other
functions for handling. I'll bring over the tests first and then hook things up.
Done. Let's check in. So where do we hook things up? It's got to be in
handle_request right after we parse the request. OK, was able to return a web
page. Cool. Let's check in.

The next step was to add a lua web module, but I think that should be done here
instead. Let's pull the app module out of the request router and into the web
module. Any json requests should come through here. I'll follow the conventions
for how angular pages work.


3 - Create angular pages
~~~~~~~~~~~~~~~~~~~~~~~~
OK, the next thing we should do is start creating some web pages. I'll follow
along with the angular tutorial. I think it may make sense for me to do this
work on my mac. Let's check this out over there. I wonder if I can do some
development there, mocking out the responses and then hooking them up later?
Alright, I added the todo content, and it appears to be working.

There are a couple of things that I need to understand. Is angular supposed to
supplant jquery? (A: I believe so. It's a different mental model). How do I make
an ajax request? (A: there's an $http service with callbacks).

I think what I want to do is to have an index.html page that show an overview of
the quarterly plan. There should be links to static pages like people and
reports by track. I'll try to get this work done without doing a prototype. If
I run into issues, though, I'll drop out of here and do an exploratory
prototype.

Alright, let's start by creating our nav elements and our basic pages. How
does angular handle nav elements? I'm going to just do some copy/paste for
now. After it works, I'll circle back.

I've created a bunch of (mostly) empty pages. Let's see if we can get a list
of staff back. Actually, let me break this out as its own implementation step.

4 - Add staff page
~~~~~~~~~~~~~~~~~~
I've been able to render some data using a StaffCtrl. Let's see if I can make
the ajax request to actually get the data from QPlan. Alright, I was able to
do this from within the StaffCtrl function. I think I'd like the flexibility
to call this explicitly. I'll do this after I get some data back. OK, I can
render the staff list and staff availability now. I'm using
link:https://github.com/craigmj/json4lua/tree/master/json4lua[json4lua] to do
the json render. We're essentially done with this. I do want to explore how
the data is loaded, though. OK, I
link:http://stackoverflow.com/questions/10973568/is-there-a-way-to-interact-with-controller-and-scope-directly-in-angularjs[see]
that you can access a scope directly.

The last thing I want to do here is to look at angular templates for the nav
elements. Done!

5 - Add work page
~~~~~~~~~~~~~~~~~
The first step is to get the data across. After that, I can render it in a
table. Let's render the data pretty straight first and then figure out how to
render items above/below cutline/feasible line. Hmmm. Not sure if I should
have the client know that track is inside the tags object or if I should
preformat it. OK, I can show above and below the cutline. I'll style this
later.

6 - Add tracks page
~~~~~~~~~~~~~~~~~~~
The first pass at this should be super quick. I'll start with the rbt function
and separate the collection of data from the rendering and then send that back
to the ajax call. OK, I have the data. Was thinking of having a dropdown to
select tracks, but let's just render everything. Done. Pretty cool. One last
bit of functionality is to show the running demand as well.

7 - Refactor into select/filter/format
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
I want the code architecture to follow a piping model that we'll use in our
qplan shell. Let's see if we can revise the code that serves the work.html
page. Getting the work items is fine, but I don't like the global pl or ppl
variables. What's the best way of handling this? I think we should set this
from the shell. We should set this on the Web module. Let's give this a try.
I'll set the staff and plan on the web module for now, but this should
actually be set on the functions providing the work items. I'll pull this out
in a bit. 

OK, we need to have something like qplan.lua that sets up the commandline and
web (and whatever else) modules. Done. Let's check this in. The next step is
moving the select and filter functions to a select.lua file. The reporting
code should move up to cmdline and web. I need to distinguish between pure lua
commandline and qplan commandline. The pure lua functions have to be short and
print stuff out. The qplan cmdline functions will be more explicit but use a
piping syntax.

Our filters should take a work item and the index of that work item in the
array. Alright, I've done a pile of work to pull functions out cmdline and
into shell to separate selection, filtering, and reporting. Gotten through
rrt.

OK, a couple more to get through. Let's go after rde next. We need to add
two-level grouping: one by triage and one by track. Once we have this, we want
to map a function that sums the demand for the work items in each triage/track
cell.

Tomorrow, I'll take a look at reorganizing things a little more. I think I want
a "lua_ui.lua" file for doing the pure lua shell, a "json_ui.lua" file for
presenting json data for web pages, and a "cls_ui.lua" file for the command line
server shell. I'll also need to write the json_format file to extract parts from
the current web.lua file.

8 - Refactor web.lua to select/filter/format
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
First, let's remove the init call from TextFormat. Done. Now, let's rename shell
to lua_ui. Done. Now, let's split web.lua into web_ui.lua and json_format.lua

9 - Revise Web UI
-----------------
Alright, let's see if we can create a two column layout with sticky
navigation. The navigation options are "Work" and "Staff". Here's the data
that we need from the server:

- All tracks
- All triages
- Assigned staff info (totals, names by skill)
- Default triage (1.5)
  - Skill demand for selected triage
  - List of work items for track with cutline and feasible line

The web view should have a slider that selects the triage. When the triage
level changes, there should be an Ajax call to the server to get the updated
demand and work items list.

Let's start by adding a sticky nav element. I'll just use the colors from the
CSS Anthology book for now and then update them once I pick a scheme. Hmmm.
This isn't working out that great. I think I need to explore this in a
prototype. Done. Let's angularize this next. Alright, I've hooked a controller
up and set up some mock data. Looks good. I'll need to hook this up to real
data. One other thing I want to do is to highlight rows with the selected
triage.

OK, let's start by having our server return the mocked data. Now, let's see if
we can parse out the track and the triage. Done. Alright, let's write/call a
function to get all the work items in a given track.

I think we should incorporate the staff into the same page as the work view.
We should make this a third column. It can be narrower than the work column.
Alright, this is in
link:https://github.com/rjose/prototypes/tree/9c5729/web_layout/proto5[proto5
of web layout].

Alright, let's rewrite our people awk script to add assignment tags. After
that, we'll hook up the selection of people by track and then feed that into
the endpoint response. OK, I added the computation of resources available.
Let's add the track staff by skill next.

Maybe we can move the triage control back up. Next, bring new styling over

Thoughts
--------
I should learn how to do TDD with angular. I should examine the angular-seed app
to see if there's anything I can learn about organizing the source files.

Here are some things I wanted to do:

- Review memory management in our C files
- Add readline support
- Think about how multiple apps (QPlan, Scheduler, etc.) should interact.
- Highlight skill headings that are short
